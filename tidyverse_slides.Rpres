Tidyverse
========================================================
author:Al√°n Ponce
date: `r Sys.Date()` 
autosize: true 


<div align="center">
<img src="imgs/ia_center.jpeg" width=700 height=600>
</div>

<!-- ![title](imgs/ia_center.jpeg) -->


Agenda
========================================================

- Quick recap
- RStudio Server
- Subsetting 
- Introduction to Tidyyverse (1)
  - Grammatical verbs
- Packages and libraries
  - Gapminder
- Tidyverse: Data Wrangling
- Conclusions
- Q&A

Subsetting (slicing)
========================================================
type: section

<div align="center">
<img src="imgs/subset.png" width=500 height=400>
</div>

Slicing
========================================================
- The process of selecting specific rows and columns of data based on some criteria.


```{r}

#mtcars

head(mtcars)

```

Slicing (1)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

# Return row 1
mtcars[1,]

```

Slicing (2)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

# Return column 4

mtcars[, 4]

#head(mtcars[, 4])

```

Slicing (3)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

#head(mtcars)

# Rows 1:5 and column 2
mtcars[1:5, 2]

```

Slicing (4)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

# Give me the rows 1-5 and column 1 of mtcars
mtcars[1:5, 1]

```

Slicing (5)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.


```{r}

# Give me rows 1-3 and columns 1 and 3 of mtcars
mtcars[1:3, c(1,3)]

```

**R indexing start from 1 not zero**

**[start:end]**

**inclusive:exclusive**

Slicing (6)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

# Give me the 3nd column (and all rows) of mtcars
mtcars[, 3]

```

Slicing (7)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

#  where cyl equals 4
mtcars[mtcars$cyl == 4, ]

```

Slicing (7)
========================================================
Use the notation **data[rows, columns]**, where rows and columns are vectors of integers.

```{r}

#  where cyl equals 4 and hp > 108
mtcars[mtcars$cyl == 4 & mtcars$hp > 108, ]

```

Slicing with subset()
========================================================
It allows you to slice and dice datasets just like you would with brackets, but the code is much easier to write

Arguments

- x	object to be subsetted.
- subset logical expression indicating elements or rows to keep: missing values are taken as false.
- select expression, indicating columns to select from a data frame.

```{r}

# Get rows of mtcars where cyl equals 4 and hp > 108
subset(x = mtcars, 
       subset = cyl == 4  & hp >  108 |  hp < 190)

```

Slicing with subset()
========================================================
It allows you to slice and dice datasets just like you would with brackets, but the code is much easier to write


```{r}

# Get rows of mtcars where cyl equals 4 and hp > 108 but only return the wt and am columns
subset(x = mtcars, 
       subset = cyl == 4  & hp <  108,
       select = c(wt, am))

```



Tidyverse
========================================================
type: section

<div align="center">
<img src="imgs/tidyverse.jpeg" width=450 height=350>
</div>


<div style="text-align: right"> 

https://www.tidyverse.org/

</div>


Tidyverse
========================================================
type: sub-section

<div align="center">
<img src="imgs/tidyverse2.jpeg" width=450 height=350>
</div>



Tidyverse
========================================================

Official site, please visit <https://www.tidyverse.org/>.

- R Base
  - loops
- What is Tidyverse?
  - Tidy paper <https://www.jstatsoft.org/article/view/v059i10>
- Grammatical verbs
- Community and dissemination



Packages and libraries
========================================================
- R packages extend the functionality of R by providing additional functions, data, and documentation. 

- They are written by a worldwide community of R users and can be downloaded for free from the interne

```{r}

#-- Install a package
# install.packages("tidyverse")

#-- Install several packages
# install.packages(c("tidyverse", "gapminder", "ggmap", "ggplot2")) # rest omitted

#-- Load a library
library(tidyverse)
library(gapminder)

```

- Cran site, please visit <https://cran.r-project.org/web/packages/gapminder/README.html>.

- Official site, please visit <https://www.gapminder.org/about/about-gapminder/history/>.


Gapminder
========================================================

- Excerpt of the Gapminder data on life expectancy, GDP per capita, and population by country.

```{r}

head(gapminder)

```

Tidyverse: Data Wrangling
========================================================
type: sub-section


The pipe operator: 
========================================================
- dplyr package

- The pipe operator allows us to combine multiple operations in R into a single sequential chain of actions.


<div align="center">
<img src="imgs/pipe_operator.jpeg" width=450 height=350>
</div>

Tidyverse: Filter
========================================================
type: sub-section


Filter
========================================================

- It allows you to specify criteria about the values of a variable in your dataset and then filters out only the rows that match that criteria.

```{r}

gapminder %>% filter(year == 2007)

```
Filter
========================================================

```{r}

gapminder %>%
  filter(country == "United States")

```


Filter
========================================================

```{r}

gapminder %>%
  filter(year == 2007, country == "United States")

```

Tidyverse: Arrange
========================================================
type: sub-section

Arrange
========================================================

- It sorts a table based on a variable

```{r}

gapminder %>% arrange(gdpPercap)

```

Arrange
========================================================

- It sorts a table based on a variable: Sorting in descending order

```{r}

gapminder %>% arrange(desc(gdpPercap))

```


Filtering then arranging
========================================================

```{r}

gapminder %>%
  filter(year == 2007) %>% arrange(desc(gdpPercap))


```

Tidyverse: Mutate
========================================================
type: sub-section


Mutate
========================================================
- Using mutate to change a variable

```{r}

gapminder %>%
  mutate(pop = pop / 1000000)

```

Mutate
========================================================
- Using mutate to add a new variable

```{r}

gapminder %>%
  mutate(gdp = gdpPercap * pop)

```
Combining verbs
========================================================
- mutate, filter, arrange

```{r}

gapminder %>%
  mutate(gdp = gdpPercap * pop) %>% filter(year == 2007) %>% arrange(desc(gdp))

```

The summarize verb
========================================================

- Functions you can use for summarizing
    - mean
    - sum
    - median
    - min
    - max

```{r}

gapminder %>%
  summarize(meanLifeExp = mean(lifeExp))


```

The summarize verb
========================================================
 -Summarizing one year

```{r}

gapminder %>%
  filter(year == 2007) %>% summarize(meanLifeExp = mean(lifeExp))

```


The summarize verb
========================================================
 -Summarizing one year

```{r}

gapminder %>%
  filter(year == 2007) %>% 
  summarize(meanLifeExp = mean(lifeExp), totalPop = sum(pop))

```

The group_by verb
======================================================== 

- Summarizing by year

```{r}

gapminder %>%
  group_by(year) %>% 
  summarize(meanLifeExp = mean(lifeExp), totalPop = sum(pop))

```
The group_by verb
======================================================== 

- Summarizing by continent

```{r}

gapminder %>%
    group_by(year, continent) %>% 
    summarize(totalPop = sum(pop),
    meanLifeExp = mean(lifeExp))

```

Visualizing with ggplot2
======================================================== 

- <https://ggplot2.tidyverse.org/>
- Summarizing by continent


```{r}

library(ggplot2)

gapminder_2007 <- gapminder %>% filter(year == 2007)

gapminder_2007


```

Visualizing with ggplot2
======================================================== 

- Summarizing by continent

```{r, fig.width=12, fig.height=8, fig.fullwidth=TRUE, fig.align = "center"}


ggplot(gapminder_2007, 
       aes(x = gdpPercap, y = lifeExp)) + 
          geom_point()


```


Visualizing with ggplot2
======================================================== 

- Summarizing by continent

```{r, fig.width=12, fig.height=8, fig.fullwidth=TRUE, fig.align = "center"}


ggplot(gapminder_2007, 
       aes(x = gdpPercap, y = lifeExp)) + 
          geom_point() + scale_x_log10()

```


Visualizing with ggplot2
======================================================== 

- The color aesthetic

```{r, fig.width=12, fig.height=8, fig.fullwidth=TRUE, fig.align = "center"}


ggplot(gapminder_2007, 
       aes(x = gdpPercap, y = lifeExp, color = continent)) + 
          geom_point() + scale_x_log10()

```


Visualizing with ggplot2
======================================================== 

- The size aesthestic

```{r, fig.width=12, fig.height=8, fig.fullwidth=TRUE, fig.align = "center"}


ggplot(gapminder_2007, 
       aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) + 
          geom_point() + scale_x_log10()

```

Visualizing with ggplot2
======================================================== 

- Faceting

```{r, fig.width=12, fig.height=8, fig.fullwidth=TRUE, fig.align = "center"}


ggplot(gapminder_2007, 
       aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) + 
          geom_point() + scale_x_log10() +
            facet_wrap(~ continent)

```

Reading files
======================================================== 

- Reading files

```{r}

gapminder2 <- read_csv("data/gapminder.csv")

gapminder2

```


Conclusions
========================================================
type: section

- Introduction to Tidyyverse (1&2)
  - Grammatical verbs
- Packages and libraries
  - Tidyverse and Gapminder
- Tidyverse: Data Wrangling
  - Filter
  - Arrange
  - Mutate
  - Summarize
  - Group by
- Visualizations with ggplot2 


Q&A
========================================================
type: section


